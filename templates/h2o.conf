---
user: root
hosts:
  "127.0.0.1.xip.io:80":
    listen:
      host: 0.0.0.0
      port: 80
    access-log: /dev/stdout
    paths:
      /:
        proxy.reverse.url: http://[unix:/var/sock/gunicorn/django.sock]/
        proxy.preserve-host: ON
        proxy.timeout.keepalive: 0
      "/static":
        file.dir: /static
  "127.0.0.1.xip.io:443":
    listen:
      host: 0.0.0.0
      port: 443
    access-log: /dev/stdout
    paths:
      /:
        proxy.reverse.url: http://[unix:/var/sock/gunicorn/django.sock]/
        proxy.preserve-host: ON
        proxy.timeout.keepalive: 0
      "/static":
        file.dir: /static

{{ define "proxy" }}
      /:
        proxy.preserve-host: ON
        proxy.timeout.keepalive: 0
        {{ if .Address }}
        {{ if (and .Container.Node.ID .Address.HostPort) }}
        proxy.reverse.url: "http://{{ .Container.Node.Address.IP }}:{{ .Address.HostPort }}" 
        {{ else }}
        proxy.reverse.url: "http://{{ .Address.IP }}:{{ .Address.Port }}"
        {{ end }}
        {{ else }}
        proxy.reverse.url: "http://{{ .Container.IP }} down"
        {{ end }}
{{ end }}

{{ define "host" }}
  "{{ .Host }}:{{ .Port }}":
    listen:
      host: 0.0.0.0
      port: {{ .Port }}
      {{ if (and .SSL (exists (printf "/etc/letsencrypt/live/%s/privkey.pem" .Host))) }}
      ssl:
        certificate-file: "/etc/letsencrypt/live/{{ .Host }}/fullchain.pem"
        key-file: "/etc/letsencrypt/live/{{ .Host }}/privkey.pem"
      {{ end }}
    access-log: /dev/stdout
    paths:
      /.well-known/acme-challenge:
        file.dir: /opt/data/{{ .Host }}/.well-known/acme-challenge/
      {{ template "proxy" .Proxy }}
{{ end }}

{{ define "hosts" }}
  {{ if not .Test }}
  {{ template "host" (dict "Host" .Host "Port"  80 "Proxy" .Proxy "SSL" (parseBool "false")) }}
  {{ template "host" (dict "Host" .Host "Port" 443 "Proxy" .Proxy "SSL" (parseBool "true")) }}
  {{ else }}
  {{ template "host" (dict "Host" .Host "Port" 5002 "Proxy" .Proxy "SSL" (parseBool "false")) }}
  {{ template "host" (dict "Host" .Host "Port" 5001 "Proxy" .Proxy "SSL" (parseBool "true")) }}
  {{ end }}
{{ end }}

{{ $ACMETEST := (parseBool (coalesce .Env.ACME_TEST "false")) }}
{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

{{ if (ne $host "") }}
hosts:
{{ range $container := $containers }}
  {{ $addrLen := len $container.Addresses }}

  {{ if (eq $addrLen 1) }}
  {{ $proxy := (dict "Container" $container "Address" (index $container.Addresses 0)) }}
  {{ template "hosts" (dict "Host" $host "Proxy" $proxy "Test" $ACMETEST) }}
  {{ else }}
  {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
  {{ $addr :=    where $container.Addresses "Port" $port | first }}
  {{ $proxy := (dict "Container" $container "Address" $addr) }}
  {{ template "hosts" (dict "Host" $host "Proxy" $proxy "Test" $ACMETEST) }}
  {{ end }}
{{ end }}

{{ end }}

{{ end }}
